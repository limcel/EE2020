`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    input [6:0] sw,       // Switches to generate different instrument pitches 
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4,    // PmodDA2 serial clock, 50MHz clock
    output reg [15:0] LED  = 0   // LED Array
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
    wire clk_20k_output;
    wire clk_50M_output;

    clock clock_instant_20k(CLK, 20000, clk_20k_output); 
    clock clock_instant_50M(CLK, 50000000, clk_50M_output);  
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
    wire [11:0]MIC_in;
    SPI u1 (CLK, clk_20k_output, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
       

    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
    wire [11:0] speaker_out;
    
    //=========================== Code for instrument ====================================//
   
    reg[31:0] instrumentfreq; 
    wire tuneclock;
    
    always begin 
        if(sw[0] == 1) 
            instrumentfreq = 523;
        else if(sw[1] == 1)
            instrumentfreq = 587;
        else if(sw[2] == 1)
            instrumentfreq = 659;
        else if(sw[3] == 1)
            instrumentfreq = 698;  
        else if(sw[4] == 1)
            instrumentfreq = 783;
        else if(sw[5] == 1)
            instrumentfreq = 880;
        else if(sw[6] == 1)
            instrumentfreq = 987;            
    end
    clock clock_instant_tune(CLK, instrumentfreq, tuneclock);
    assign speaker_out =  tuneclock;
    
   
    //========================= End Code for instrument ===============================//
    
    //=========================== Code for volume display ==============================//
    
    wire connector;
    
    clock clock_instant_volume(CLK, 20000, connector); //set the contstant clock
    reg [15:0] max = 16'b0;  
    reg [15:0] COUNT = 16'b0;
    
    always  @ (posedge connector) begin
        max = (COUNT == 0)? 0 : max;
        COUNT <= (COUNT == 200)? 0 : COUNT + 1;
            if(MIC_in > max)
            max <= MIC_in;
        LED = 16'b0000;
        
        if (max >= 2095)
            LED[0] = 1;
        
        if (max >= 2220) 
            LED[1] = 1;
    
        if (max >= 2345)
            LED[2] = 1;
             
        if (max >= 2470) 
            LED[3] = 1;
        
        if (max >= 2595)
            LED[4] = 1;
            
        if (max >= 2720)
            LED[5] = 1;
            
        if (max >= 2845) 
            LED[6] = 1;
        
        if (max >= 2970)
            LED[7] = 1;
                 
        if (max >= 3095) 
            LED[8] = 1;
            
        if (max >= 3220)
            LED[9] = 1;
            
        if (max >= 3345)
            LED[10] = 1;
            
        if (max >= 3470) 
            LED[11] = 1;
        
        if (max >= 3595)
            LED[12] = 1;
                 
        if (max >= 3720) 
            LED[13] = 1;
            
        if (max >= 3845)
            LED[14] = 1;  
            
        if (max >= 3970)
            LED[15] = 1;            
        
    end 
   
 
    
    
    
    

    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
    DA2RefComp u2(clk_50M_output, clk_20k_output, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
